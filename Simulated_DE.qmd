---
title: "Simulating the DE"
format: html
---


# Prepare the Environment
```{r}
library(readxl)
library(MASS)
library(ggdag)
library(dagitty)
library(tidyverse)
```


## Aggreate the Data
```{r Data Wrangling}
# read in the data
de22 <- read_excel("DE22.xlsx") %>% 
    filter(
    Measurement == "Digital Economy Real Gross Output by Industry",
    # remove 0s
    Value > 0) 
  
# The BEA categorizes industries  down to 5 levels, and it's not consistent between industries
# To make this easier to digest, I want aggregate industries down to the 3 level which I called "sub-attributes" 

# first I would like remove my labels so I can aggregate the totals together
industry_output<-  de22 %>% 
    mutate(
      Subcategory = str_replace(Subcategory, "_.*", ""),
      MicroAttribute = str_replace(MicroAttribute, "_.*", ""),
      Attribute = str_replace(Attribute, "_.*", ""),
      SubAttribute = str_replace(SubAttribute, "_.*", "")) %>%
    # remove these sub totals,  as all observations fall in one of the other
    filter(Category != "All Industries" & Category != "Private industries",
           # remove the granular category keeping only the observations totaled at the sub-attribute level
           SubAttribute == MicroAttribute)


# these categories have subtotals which for ease I'll remove manually
levels_remove <- c(
  "Arts, entertainment, recreation, accommodation, and food services",
  "Information",
  "Government",
  "Educational services, health care, and social assistance",
  "Finance, insurance, real estate, rental, and leasing",
  "Manufacturing",
  "Professional and business services")

# remove the sub levels
industry_output <- industry_output %>%
  filter(!SubAttribute %in% levels_remove) %>%
  arrange(Year) %>%
  group_by(Category, Subcategory, Attribute) %>% # create new variables to account for growth
  mutate(
    Year <- as.factor(Year), # create as factor for graphs
    Yearly_Change = replace_na(Value - lag(Value), 0),  # Replace NA with 0 in one step
    YOY = round(coalesce(Yearly_Change / lag(Value), 0), 2)) %>%
  ungroup() %>% 
  # renaming these columns so they make more sense
  dplyr::select(
    "Sector" = Subcategory,
    "Industry" = Attribute,
    "Specialization" = Category,
    Year,
    Value,
    YOY) 
```



# Analyze The Market

## Growth over Time
```{r YOY Trends}
industry_output %>%
  filter(Year != 2017) %>% 
# Scatter plot of growth rates (YOY) over years
ggplot( aes(x = Year, y = YOY, color = Specialization)) +
  geom_line(aes(group = Specialization), alpha = 0.5) + 
  theme_minimal() +
  labs(
    title = "Growth Rates (YOY) by Specialization Over Years",
    x = "Year",
    y = "YOY Growth Rate",
    color = "Specialization") +
  theme(legend.position="none")

```


## Historgram
```{r Histrogram}
hist(industry_output$YOY, breaks = 4, col = "lightblue", main = "Histogram of Data",
     xlab = "Data", ylab = "Frequency")
```


# Summary Statistics!
```{r}
industry_ss <- industry_output %>%
  group_by(Sector,Industry, Specialization) %>%
  summarise(
    Mean_Value = round(mean(Value), 2),
    STD_Value = round(sd(Value), 2),
    Mean_YOY = round(mean(YOY[Year != 2017]), 2),
    STD_YOY = round(sd(YOY[Year != 2017]), 2))

industry_ss
```
## The results in table


# Simulating 2023!
Use the summary stats to create simulations by category
```{r monte_carlo}
set.seed(4568)
# Monte Carlo simulation
perform_monte_carlo <- function(data, n = 1000) {
  # create a list of results
  results <- list()
  
  #  create simulations for each type of specialized industry
  for (i in 1:nrow(data)) {
    sector <- data$Sector[i]
    industry <- data$Industry[i]
    specialization <- data$Specialization[i]
 
    
    # simulate growth,
    # using the 5 year average and standard deviation, generate 1000 random numbers that fall within the Gaussian distribution
    # with only five years data it's hard to see a pattern in the growth rates
    # i could use just the averages
    # we could do two type of models
    sim_growth <- rnorm(n, mean = data$Mean_YOY[i], sd = data$STD_YOY[i])
    
    # repeat the process for the overall industry output, using the simulated growth. applying the growth rate 
    sim_value <- rnorm(n, mean = data$Mean_Value[i] * (1 + sim_growth), sd = data$STD_Value[i])

    
    # Create a data frame for the current specialization
    sub_industry_sims <- data.frame(
      Sector = sector,
      Industry = industry,
      Specialization = specialization,
      Value = sim_value,
      YOY = round(sim_growth, 2)) # just for interprebability, do not want to double apply growth
    
    # Append to the results list
    results[[i]] <- sub_industry_sims
  }
  
  # Combine all results into a single data frame
  final_results <- bind_rows(results)
  
  return(final_results)
}

# Perform Monte Carlo simulation
simulation_results <- perform_monte_carlo(industry_ss)

# View the results
head(simulation_results)
```

# Combine the Results!
Add everything together so I can put it into Tableau

```{r Simulated Results}

# find the summary stats
de23 <-  simulation_results %>% 
  group_by(Sector,Industry, Specialization) %>%
  summarise(
    Bottom_Fifth_Value = quantile(Value, probs = 0.05),
    Mean_Value = mean(Value),
    Top_Fifth_Value = quantile(Value, probs = 0.95),
    Bottom_Fifth_Growth = quantile(YOY, probs = 0.05),
    Mean_Growth = mean(YOY),
    Top_Fifth_Growth = quantile(YOY, probs = 0.95))


de23 <- de23 %>%
  pivot_longer(
    cols = c(Bottom_Fifth_Value, Mean_Value, Top_Fifth_Value, Bottom_Fifth_Growth, Mean_Growth, Top_Fifth_Growth),
    names_to = c("Value_Type", ".value"),
    names_pattern = "(Bottom_Fifth|Mean|Top_Fifth)_(.*)") %>%
  mutate(
    Value_Type = case_when(
      Value_Type == "Bottom_Fifth" ~ "Bottom_Fifth",
      Value_Type == "Mean" ~ "Predicted",
      Value_Type == "Top_Fifth" ~ "Top_Fifth"),
    Year = 2023,
    YOY = round(Growth,2)) %>% 
  select(-Growth)

industry_output$Value_Type = "Actual"
# combine the data
industry_output_23 <-  bind_rows(industry_output, de23)
```


#export data
```{r}
write.csv(industry_output, "de23")
```














